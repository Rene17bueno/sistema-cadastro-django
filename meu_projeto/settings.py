"""
Django settings for meu_projeto project.

Generated by 'django-admin startproject' using Django 5.2.1.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Importação adicional necessária para conexão com o Render/PostgreSQL
import dj_database_url

# Carregar variáveis de ambiente do arquivo .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ----------------------------------------------------------------------
# 1. SEGURANÇA E AMBIENTE
# ----------------------------------------------------------------------

# Configuração segura e dinâmica (lendo do .env)
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure--chave-padrao-apenas-para-desenvolvimento')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# ATUALIZAÇÃO CRÍTICA PARA O RENDER:
# 1. Busca a variável ALLOWED_HOSTS (que deve ser uma string de hosts separados por vírgula).
# 2. Adiciona o host de produção do Render (que é injetado pelo Render na variável RENDER_EXTERNAL_URL).

allowed_hosts_str = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = allowed_hosts_str.split(',')

# Adiciona o domínio do Render (se existir) para corrigir o erro 400 Bad Request
RENDER_EXTERNAL_URL = os.getenv('RENDER_EXTERNAL_URL')
if RENDER_EXTERNAL_URL:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_URL.replace('https://', '').replace('http://', ''))

# ----------------------------------------------------------------------
# 2. DEFINIÇÃO DE APLICATIVOS
# ----------------------------------------------------------------------

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Aplicações de Terceiros
    "widget_tweaks",
    
    # Minhas Aplicações
    'cadastro',
]

# Modelo de usuário personalizado
AUTH_USER_MODEL = 'cadastro.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise é crucial para servir arquivos estáticos em produção
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'cadastro.middleware.AccessControlMiddleware', # Manter comentado se não estiver em uso
]

ROOT_URLCONF = 'meu_projeto.urls'

# ----------------------------------------------------------------------
# 3. TEMPLATES
# ----------------------------------------------------------------------

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Templates globais
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meu_projeto.wsgi.application'

# ----------------------------------------------------------------------
# 4. BANCO DE DADOS
# ----------------------------------------------------------------------

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if os.getenv('DATABASE_URL'):
    DATABASES['default'] = dj_database_url.parse(os.getenv('DATABASE_URL'), conn_max_age=600)
    

# ----------------------------------------------------------------------
# 5. VALIDAÇÃO DE SENHA
# ----------------------------------------------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ----------------------------------------------------------------------
# 6. INTERNACIONALIZAÇÃO
# ----------------------------------------------------------------------

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# ----------------------------------------------------------------------
# 7. ARQUIVOS ESTÁTICOS E DE MÍDIA
# ----------------------------------------------------------------------

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles' # Para collectstatic
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ----------------------------------------------------------------------
# 8. CONFIGURAÇÕES DE AUTENTICAÇÃO
# ----------------------------------------------------------------------

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = '/cadastro/login/'
LOGIN_REDIRECT_URL = '/cadastro/' 
LOGOUT_REDIRECT_URL = '/cadastro/login/' # Onde redirecionar após o logout

SESSION_COOKIE_AGE = 3600 # 1 hora em segundos
SESSION_SAVE_EVERY_REQUEST = True

# ----------------------------------------------------------------------
# 9. DIVERSOS E SEGURANÇA ADICIONAL
# ----------------------------------------------------------------------

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Origens confiáveis para CSRF (apenas para desenvolvimento)
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000']

# Configurações de segurança para produção
if not DEBUG:
    # ATUALIZADO: Adicionando o domínio do Render à lista de trusted origins se for ambiente de produção
    # A variável de ambiente RENDER_EXTERNAL_URL é fornecida pelo Render
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        CSRF_TRUSTED_ORIGINS.append(render_url)
        
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000 # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'

# Configuração de LOGGING para erros
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django_errors.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
